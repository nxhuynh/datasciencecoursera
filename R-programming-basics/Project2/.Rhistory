y <- 10
foo <- function(x){}
foo <- function(x){
y + x
}
bar <- function(x){
y <- 2
y * 1000 + foo(x)
}
bar(3)
quit()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("httr")
install.packages("swirl")
quit(
)
install.packages("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename()
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1", "folder2")
?file.create
dir.create
?dir.create
dir.create(file.path("testdir2","testdir3"), recursive = T)
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
quit()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Tommy")
namemy_
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA,5,na)
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x <- NA
x == NA
is.na(x)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c[3,5,7]]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
quit()
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units="days")
cube <- function(x,n){}
cube <- function(x,n){
x^3
}
cube(3)
exp <- function(x,n){
x^n
}
exp(3)
x <- 1:10
x <- 0
x
x <- 1:10
if (x>5){
x <- 0
}
f <- function(x){
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
f(3)
z <- 10
f(3)
f(3)
z <- 10
f(3)
q()
setwd("/data/r-workspace/program2")
source("cachemean.R")
x <- [1:9]
x <- c(1:9)
y <- makeVector(1:9)
y
y$get()
y$getmean()
?cachemean
??cachemean
cachemean
cachemean(y)
source("cachemean.R")
cachemean
cachemean(y)
y$getmean()
?solve
m <- matrix(c(4,7,2,6), 2, 2)
solve(m)
m2 <- matrix(c(4,7,2,6,5,9), 3, 2)
solve(m2)
nrow(m2)
source("cachematrix.R")
source("cachematrix.R")
m <- makeCacheMatrix(matrix(c(4,2,6,7),2,2))
m$get()
m$getInverse()
cacheSolve(m)
m$getInverse()
m$set(m2)
m$get()
m$getInverse()
m$set(matrix(c(4,2,7,6),2,2))
m$get()
m$getInverse()
cacheSolve(m)
q()
